%!PS-Adobe-3.0 EPSF-3.0
%%EndComments
% emacs ps-mode C-c C-c to preview, C-c C-b to debug
% Public domain licence
%%BeginProlog
% What idiomatically goes here? See Document Structuring Conventions
%%EndProlog
/mm {25.4 div 72 mul} def % generally work in points to be idiomatic though
/pagewidth 297 mm def % FIXME formally?
/pageheight 210 mm def
/margin 10 mm def
<< /PageSize [pagewidth pageheight]
   /PageOffset [margin margin] % "reposition the page image on the physical medium"
>> setpagedevice
/w pagewidth margin 2 mul sub def
/h pageheight margin 2 mul sub def
/y {neg h add} def % flip y axis without transforming everything e.g. text

/brewer [ % colorbrewer2.org: 9 classes qualitative print friendly
    [55 126 184] % blue
    [152 78 163] % purple
    [247 129 191] % pink
    [166 86 40] % brown
    [77 175 74] % green
    [255 255 51] % yellow
    [228 26 28] % red
    [255 127 0] % orange
    [153 153 153] % grey
] def
/setbrew { % brewer index to setrgbcolor, consumes arg
    brewer exch get % zero-indexed
    { 255 div } forall
    setrgbcolor
} def
/inset [50 0 0 100] def % t r b l
/ix inset 3 get def
/iy inset 0 get def
/iw w ix sub inset 1 get sub def
/ih h iy sub inset 2 get sub def
/row {10 mul y iy sub} def % row-n to y-offset
/starthour 7 def
/dayswide 1 def % implementation requires integer
/time { % d hh mm to x-offset (d is zero-based day count)
    3 -1 roll 24 mul
    3 -1 roll add
    starthour sub 60 mul add
    1440 dayswide mul div
    iw mul ix add
} def
/earliest 0 starthour 0 time def
/latest dayswide starthour 0 time def
/zeropad { % stack: int width
    1 dict begin % scope dict
    /width exch def
    /num exch def
    /actual num 1 gt {num} {1} ifelse log floor cvi 1 add def
    /need actual width gt {actual} {width} ifelse def
    /container 10 need exp cvi def
    container num add
    need 1 add string cvs
    1 need getinterval
    end % scope dict
} def
/currow -1 def
/prevtype -1 def
/harrow { % horizontal arrow (negative size means left)
    % stack: arrowsize
    1 dict begin
    /as exch def
    0 as rlineto
    as as neg rlineto
    as neg as neg rlineto
    closepath
    end
} def
/seg { % time segment as coloured horizontal line
    % stack: [d h m] nexttype
    1 dict begin
    /nt exch def % next type (i.e. starting at this timepoint)
    /tp exch aload pop time def % timepoint
    /as 1 def % arrow size
    5 setlinewidth
    prevtype 0 lt { % start of row
        nt setbrew
        userdict /prevtype nt put
        tp earliest lt { % underflows scale
            earliest currow row moveto
            as neg harrow
        } {
            tp currow row moveto
        } ifelse
    } {
        tp earliest ge {
            tp latest le {
                tp currow row lineto
            } {
                latest currow row lineto
                as harrow
            } ifelse
        } if
        stroke
        nt setbrew
        tp currow row moveto % wrong
    } ifelse
    end
} def
/label { % label new case row and open path
    % stack: nth-row label
    /currow currow 1 add def
    /prevtype -1 def
    0 currow row moveto
    0 setgray
    show
} def

/Helvetica findfont 14 scalefont setfont % title
gsave 0 14 y moveto 0 setgray (Prototype theatre flow view 14 Apr 2024) show grestore

/Helvetica findfont 10 scalefont setfont % hour markers
0 1 24 dayswide mul {
    newpath % seems to accommodate inner `show`, and is ?optional
    1 dict begin
    /n exch def
    /hour n starthour add def
    /day hour 24 idiv def
    day hour 24 mod 0 time -2 row moveto
    0.5 setgray
    n 24 dayswide mul lt {
        gsave
        2 -10 rmoveto
        hour 24 mod 2 zeropad show
        grestore
    } if
    0 ih neg rlineto
    hour 24 mod 0 eq {2} {0.5} ifelse setlinewidth
    0.9 setgray
    stroke
    end
} for

/events [ % currently array to line up with brewer (vs trying dict)
    % (ward ready)
    (send)
    (bay)
    (anaes start)
    (theatre in)
    (surg start)
    (surg stop)
    (wait PACU)
    (wait ICU)
    (theatre out)
] def
/nevents events length def

0 1 nevents 1 sub { % legend
    1 dict begin
    newpath
    /ss 10 def % swatch size
    /ls w nevents div def % label size
    dup dup dup
    ls mul 0 moveto
    ss 0 rlineto
    0 ss rlineto
    ss neg 0 rlineto
    0 ss neg rlineto
    closepath
    setbrew
    fill
    0 setgray
    ls mul 15 add 2 moveto
    events exch get show
    end
} for

(case-one) label
[0 07 45] 0 seg % rework to hold over until next start time
[0 08 05] 1 seg
[0 08 08] 2 seg
[0 08 29] 3 seg
[0 08 50] 4 seg
[0 11 22] 5 seg
[0 11 32] 6 seg
[0 11 48] 8 seg
(case-two) label
[0 06 45] 0 seg
[0 07 10] 1 seg
[0 07 11] 2 seg
[0 07 52] 3 seg
[0 08 23] 4 seg
[0 11 01] 5 seg
[0 11 31] 7 seg
[0 12 31] 8 seg
showpage
%%EOF
